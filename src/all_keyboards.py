from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from ydb_func import *

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–¥–∞—á–∞ (–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏)
def build_task_projects_markup(user_id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1

    project_id, project_name = ydb_get_projects_by_owner_id(user_id)
    
    for i in range(0, len(project_id)):
        callback = 'create_task_project_id_' + project_id[i]
        markup.add(InlineKeyboardButton(project_name[i], callback_data=callback))
    return markup

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏
def build_task_markup(user_id, data = None):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1

    # –µ—Å–ª–∏ task_id –º–æ–∂–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ callback data - –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º, –∏–Ω–∞—á–µ - –±–µ—Ä—ë–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —é–∑–µ—Ä–∞ –≤ ydb
    if data == None:
        user_task_id, user_full_name, user_role, user_create_task_flag = ydb_get_user_data(user_id)
        task_id = user_task_id
    elif data != None:
        start = len('task_id_')
        end = len(data)
        task_id = data[start:end]
        user_task_id, user_full_name, user_role, user_create_task_flag = ydb_get_user_data(user_id)
    
    
    task_header, task_body, task_executor_id, task_deadline, task_urgent_flag, task_status, task_project_id, task_owner_id = ydb_get_task_data(task_id)

    # –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
    if user_role == 'manager':
        if task_status == 'backlog':
            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –¥–µ–¥–ª–∞–π–Ω
            if (task_executor_id != None) and (task_deadline != None):
                markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é', callback_data='set_status_todoNext'))
                markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (—Å—Ä–æ—á–Ω–æ–µ)', callback_data='set_status_todoUrgent'))
            markup.add(InlineKeyboardButton('–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data='set_deadline'))
            markup.add(InlineKeyboardButton('–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', callback_data='set_executor'))
            markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'todoNext') or (task_status == 'todoUrgent'):
            markup.add(InlineKeyboardButton('–ù–∞–ø–æ–º–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é', callback_data='send_notification_to_executor'))
            markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'inProgress'):
            markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'readyToRewiew'):
            markup.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', callback_data='set_status_done'))
            markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ', callback_data='set_status_discuss'))
            markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'discuss'):
            markup.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', callback_data='set_status_done'))
            markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'blocked'):
            markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é', callback_data='set_status_todoNext'))
            markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (—Å—Ä–æ—á–Ω–æ–µ)', callback_data='set_status_todoUrgent'))
            markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))

    # –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å        
    elif user_role == 'executor':
        if (task_status == 'todoNext') or (task_status == 'todoUrgent'):
            markup.add(InlineKeyboardButton('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data='set_status_inProgress'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'inProgress'):
            markup.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–≤—å—é', callback_data='set_status_readyToRewiew'))
            if task_urgent_flag == False:
                callback == 'set_status_todoNext'
            elif task_urgent_flag == True:
                callback == 'set_status_todoUrgent'
            markup.add(InlineKeyboardButton('–ó–∞–¥–∞—á–∞ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ', callback_data=callback))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'readyToRewiew') or (task_status == 'discuss'):
            markup.add(InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É', callback_data='set_status_inProgress'))
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
        elif (task_status == 'blocked'):
            callback = 'status_' + task_status + '_' + task_project_id
            markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))

    return markup

def main_reply_keyboard():
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard = True)
    markup.add(KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"))
    return markup


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
def build_projects_markup(user_id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1

    project_id, project_name = ydb_get_projects_by_user_id(user_id)
    
    for i in range(0, len(project_id)):
        callback = 'project_id_' + project_id[i]
        markup.add(InlineKeyboardButton(project_name[i], callback_data=callback))
    return markup

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
def build_task_status_markup(user_id, data):

    markup = InlineKeyboardMarkup()
    markup.row_width = 1

    if 'role_manager_' in data:
        start = len('role_manager_')
        end = len(data)
        project_id = data[start:end]
        project_name, project_owner_id = ydb_get_project_data(project_id)
        if project_owner_id == user_id:
            user_role = 'manager'
            ydb_update_user_data(user_id, user_role=user_role)
        else:
            return

    elif 'role_executor_' in data:
        start = len('role_executor_')
        end = len(data)
        project_id = data[start:end]
        user_role = 'executor'
        ydb_update_user_data(user_id, user_role=user_role)

    elif 'project_id_' in data:
        start = len('project_id_')
        end = len(data)
        project_id = data[start:end]
        user_role = 'executor'
        ydb_update_user_data(user_id, user_role=user_role)

    # –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
    if user_role == 'manager':
        callback = 'status_backlog_' + project_id
        markup.add(InlineKeyboardButton('–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ üåê', callback_data=callback))
        callback = 'status_todoNext_' + project_id
        markup.add(InlineKeyboardButton('–ù–µ –Ω–∞—á–∞—Ç—ã–µ üì©', callback_data=callback))
        callback = 'status_urgent_' + project_id
        markup.add(InlineKeyboardButton('–ù–µ –Ω–∞—á–∞—Ç—ã–µ —Å—Ä–æ—á–Ω—ã–µ üö©', callback_data=callback))
        callback = 'status_inProgress_' + project_id
        markup.add(InlineKeyboardButton('–í —Ä–∞–±–æ—Ç–µ üß¨', callback_data=callback))
        callback = 'status_RTR_' + project_id
        markup.add(InlineKeyboardButton('–ì–æ—Ç–æ–≤—ã–µ –∫ —Ä–µ–≤—å—é ‚òëÔ∏è', callback_data=callback))
        callback = 'tatus_discuss_' + project_id
        markup.add(InlineKeyboardButton('–ù–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ ‚öñÔ∏è', callback_data=callback))
        callback = 'status_blocked_' + project_id
        markup.add(InlineKeyboardButton('–ù–∞ –ø–∞—É–∑–µ ‚è∏', callback_data=callback))
        callback = 'status_done_' + project_id
        markup.add(InlineKeyboardButton('–ê—Ä—Ö–∏–≤', callback_data=callback))
        callback = 'role_executor_' + project_id
        markup.add(InlineKeyboardButton('–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', callback_data=callback))
        callback = 'main_menu'
        markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))

    # –µ—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å        
    elif user_role == 'executor':
        callback = 'status_todoNext_' + project_id
        markup.add(InlineKeyboardButton('–ù–æ–≤—ã–µ üì©', callback_data=callback))
        callback = 'status_urgent_' + project_id
        markup.add(InlineKeyboardButton('–ù–æ–≤—ã–µ —Å—Ä–æ—á–Ω—ã–µ üö©', callback_data=callback))
        callback = 'status_inProgress_' + project_id
        markup.add(InlineKeyboardButton('–í —Ä–∞–±–æ—Ç–µ üß¨', callback_data=callback))
        callback = 'status_RTR_' + project_id
        markup.add(InlineKeyboardButton('–ì–æ—Ç–æ–≤—ã–µ –∫ —Ä–µ–≤—å—é ‚òëÔ∏è', callback_data=callback))
        callback = 'status_discuss_' + project_id
        markup.add(InlineKeyboardButton('–ù–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ ‚öñÔ∏è', callback_data=callback))
        callback = 'status_blocked_' + project_id
        markup.add(InlineKeyboardButton('–ù–∞ –ø–∞—É–∑–µ ‚è∏', callback_data=callback))
        callback = 'status_done_' + project_id
        markup.add(InlineKeyboardButton('–ê—Ä—Ö–∏–≤', callback_data=callback))
        callback = 'role_manager_' + project_id
        markup.add(InlineKeyboardButton('–ú–µ–Ω—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è', callback_data=callback))
        callback = 'main_menu'
        markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
    return markup

def build_task_headers(user_id, data):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1

    start = len('status_')
    end = data.find('_', start)
    status = data[start:end]

    start = end + 1
    end = len(data)
    project_id = data[start:end]

    user_task_id, user_full_name, user_role, user_create_task_flag = ydb_get_user_data(user_id)
    if user_role == 'executor':
        task_id, task_header = ydb_get_tasks_by_status_project_and_executor(task_executor_id = user_id, task_status = status, task_project_id = project_id)
    elif user_role == 'manager':
        task_id, task_header = ydb_get_tasks_by_status_project_and_owner(task_owner_id = user_id, task_status = status, task_project_id = project_id)

    for i in range(0, len(task_id)):
        callback = 'task_id_' + task_id[i]
        markup.add(InlineKeyboardButton(task_header[i], callback_data=callback))
    callback = 'project_id_' + project_id
    markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=callback))
    return markup
